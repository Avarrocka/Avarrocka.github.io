Closure properties
 e.g. If a language is regular, and we 'massage' it, is it still regular?
 
 Union
  Suppose L1, L2 are regular
  Prove that L1 U L2 are regular 
  
  Regex Method 
	  Suppose L1 = L(R1), L2 = L(R2) 
	  then R' = R1+R2
	  and L(R') = L1 U L2
  
  FSA Method
	  Suppose L1 = L(M1), L2 = L(M2)
	  where M1, M2 are DFSAs
	  
	  Here's a NFSA Mu such that L(Mu) = L1 U L2
	  Take M1, M2. 
	  Create a new starting state, who epsilon transitions into both the starting state of M1 and M2.
	  
	  e.g.
			/----E----(M1q0)--->ETC
	  (Muq0) 
			\----E----(M2q0)--->ETC
			

 Complement
  Suppose L is regular
  Prove that L complement is also regular 
  
  Regex Method 
	HARD!
	
  FSA Method 
   Suppose M = {Q,Sigma, Sigma*, s, F}
   is a DFSA s.t. L(M) = L 
   
   Here's a FSA called M comp such that L(M comp) = L comp 
   M comp is the inverse of every state in M, e.g
   (q0)  ((q1))   ----->    ((q0))     (q1)
   
   Mcomp = {Q, Sigma, Sigma*, s, Q-Fcomp}
   
   Basically just the inverse of accepting states, same transitions, etc
   
 Intersection
   Suppose L1, L2 are regular 
   Prove that L1 n L2 is regular 
   
   Regex Method 
    Suppose L(R1) = L1, L(R2) = L2
	Let Rn = (HARD!)
	L1 n L2 = not (not L1 U not L2)
	
   FSA Method 
    M1 = {Q1, Sigma, Sigma*1, s1, F1}
	M2 = {Q2, Sigma, Sigma*2, s2, F2}
	
	Mn = {Qn, Sigma, Sigma*n, sn, Fn}
	
	Qn = Q1 x Q2 (cartesian product) = {(q1, q2): q1 (- Q1, q2 (- Q2}
	
	Sigma*n, ((q1, q2), z) = (sigma*1(q1,c), sigma*2(q2,c))
	
	sn = (s1, s2)
	
	Fn = F1 x F2 = {(q1, q2): q1 (- F1, q2 (- F2}
	
	So that Mn accepts exactly the strings that are in L1 n L2 
	
  Concatenation
	Suppose L1, L2 are regular
	Prove that L1.L2 is regular 
	
	Regex Method 
	 L(R1) = L1, L(R2) = L2 
	 Let R = R1.R2 
	       = R1R2 
	 Then L(R) = L1L2 
	 
	FSA Method 
	 Remove the accepting states from M1 and instead point them to the starting state of M2 
	 Starting state is the M1 starting state 
	 
	 (m1q0) -->  ((m1q1))      (m2q0) --> ((m2q1))
	 becomes
	 (m1q0) --> (m1q1) --> (m2q0) --> ((m2q1))
	 
	 
  Star
	Suppose L is regular
	Prove L* is regular 
	 
	Regex Method 
	 L(R) = R
	 L(R*) = L* 
	 
	FSA Method 
	 New state outside M, which is the new start state which is accepting.
	 The old starting state is linked by epsilon
	 Each final state loops back to new start state with epsilon too 
	 
Structural induction of regex statements
	Proof 1:
	All regular expressions without * is finite 
	P(R): If R does not contain the symbol *, then L(R) is finite 
	
	Proof 2:
	Ins0(R): Basically, for some string in L, insert a 0 anywhere in the string
	So we can prove if L is regular, than any Ins0(L) is also regular
	
	P(R): There exists R' such as that L(R) = Ins0(L(R))
	
	Basis: 
	 1) For R = NULL, Let R' = NULL 
	 Then L(R) = NULL
	 So, Inso(L(R)) = NULL = L(R')
	 
	 2) For R = Epsilon, Let R' = 0
	 Then L(R) = {epsilon}
	 So Ins(L(R)) = {0} = L(R')
	 
	 3) For R = b, Let R' = {0b+b0}
	 Then L(R) = {b},
	 Then Ins0(L(R)) = {0b, b0} = L(R')
	 
	Inductive Step:
	Let S, T be regexes.
	Suppose P(S), P(T) holds. 
	
	1) For R = (S+T), choose R' = (S'+T') Then
	  Ins0(L(R)) = Ins0L(S+T) 
	             = Inso(L(S) U L(T))
				 = Ins0(L(S) U Ins0(L(T))
				 = L(S') U L(T')			by IH 
				 = L(S' + T')
				 = L(R')
	2) For R = (ST), choose R' = (S'T + ST')
	
	3) For R = S*, choose R' = (0+ S*S'S*) 
	

Proving a language NOT regular (Pumping Lemma)

 Pumping Lemma is used for proving that a language is NOT regular.
  If L is a regular language, there is an integer n>0 that:
   n is the amount of states in the DFSA that accepts it.
   
  (*) For any string x (- L, where |x| >= n, there are strings u, v, w such that:
   a) x = uvw
   b) v != epsilon 
   c) |uv| <= n
   d) uv^kw (- L for all k (- N
  
  To prove L is not regular, do a proof by contradiction against the (*) property
  
					String x
  |________________________________________________|
  |               n               |
  |   u      |  v   |                   w          |
  u can disappear
  v can never disappear (b, v!=epsilon)
  |uv| is ALWAYS equal to or less than n 
  You can repeat v any number of times (pumping v)
  
  Proof by contradiction 
  1) Suppose L is regular 
  2) Since L is regular, we apply the Pumping Lemma and assert the existence of n > 0 that satisfies (*)
  3) Give a particular string x such that 
     x (- L 
	 |x| >= n 
  4) By Pumping Lemma, there are strings u,v,w such that a-d hold. Pick a particular number k (- N, and argue that uv^kw !(- K and prove by contradiction 
  
  Example
  Let L = {0^k1^k: k (- N}. Prove that L is not regular 
  
  1) By way of contradiction, suppose L is regular
  2) Let n be as in the Pumping Lemma 
  3) Let x = 0^n1^n 
     Then x (- L 
	 and |x| = 2n >= n 
  4) By the pumping lemma, there are strings u,v,w that a-d are satisfied
  by d) v must be 0^j where 0 < j <= n 
  By choosing k = 2,
  We add 
  0^(n+j)1^n 
  Since j > 0, then (n+j) != n, therefore by the pumping lemma, the language L denoted by... is not regular!
  

Chapter 8 - Context Free Languages  (CFL)
 CFLs are another class of languages. 
 There are two ways in which we approach languages
 
 The set of rules (like regex) is called context-free grammar(CFG) for CFL.
 
 Examples:
 Take the following productions/replacement rules
  S->0S1
  S->E 
  Take thing on LHS and change to thing on the RHS. 
  e.g. S => 0S1 => 00S11 => 000S111 => 000111 (using S->E)
  once we arrive at 000111, and there is no symbol to replace, that is the end.
  
  We can write the arrived at string as S =>* 000111, that means that 000111 can be arrived at by S.
  S =>* x     means that S generates X
  
  A CFG is a 4-tuple.
  G = {V, Sigma, P, S}
  V = a set of variable (finite)
  Sigma = alphabet / terminal
  P = Set of productions (replacement rules) 
	e.g. A -> a (where a consistents of variables and terminals)
  S = the start variable (S (- V)
  
  Convention - Don't really bother to state V, P, etc. Just have S. We really only need to state productions 
   We can write 
    S -> 0S1, E instead of writing both 
   G generates x (- Sigma* means that 
    S =>* x 
   
   L(G) = {x (- Sigma*: S =>* x}
   The set of all things in the terminal such that S generates x 
   
   As for the above, L(G) = {0^n1^n, k (- N}
   As proven above, L(G) is not regular. That's it! 