++++++++++++ CSCA48 Tutorial 05 ++++++++++++

Today we went over:
Binary Search Trees (INSERT, DELETE, General Structure)
Heaps (INSERT, DELETE, HEAPIFY, General Structure, MinHeap/MaxHeap)

------------------------------------------------------
Binary Search Tree
------------------------------------------------------
A Binary Tree with each left child of it less than that element, and each right child of it, more than it. This can work with numbers (1 < 3, 5 > 3) for example, or characters (A < C, K > C).

For example, we have the word CHOKEJOB:
Insert(C), Insert(H)... O K E J O B and so on.
This creates this BST:
	C
      /   \
     B	   H
          / \
         E   O
           /   \
          K     O
         /
        J
>>> INSERT
The INSERT operation is easy enough. The basic algorithm is:
Compare with node (start at root).
If larger - try to compare it with right node
If smaller - try to compare it with left node
If equal - place it in any subtree (shouldnt exist, replicates)

>>> DELETE
The DELETE operation is a bit trickier. We delete the node and then have one of three cases:
1) If no children - Done
2) If one child - just point parent to child node
3) If two children - Replace it with the max element in left subtree, or min element in right subtree.

For example above:
1) Delete C [3]		1) Delete K [2]
	E			C
      /   \		      /   \
     B	   H		     B	   H
          / \		          / \
         --  O		         E   O
           /   \	           /   \
          K     O	          /     O
         /         	         /
        J		        J

------------------------------------------------------
Heaps
------------------------------------------------------
Heaps are similar to trees. We define two types of heaps, Min Heaps and Max Heaps. Min-heaps always have the smallest element at the root, while Max-heaps always have the largest element at the root. Unlike binary search trees, it is the values that move, not the place to be inserted in.

>>>INSERT 
Because the defintion of a heap is a COMPLETE BINARY TREE (Read Tut04Notes.txt), we INSERT elements sequentially, so basically:
	1
      /   \
     2     3
    / \   / \
   4   5 6   7
(In that order above)

So, the insertion of RAPTORS is:
	R
       / \
      A   P
     / \ / \
    T  O R  S

We do think about the applications of a Heap though. We define a Min-heap and a Max-heap. Basically, we insert the element then float it up to its proper place (as in smallest element goes to the top in Min-heaps, largest elements go to the top in max-heaps).

>>> HEAPIFY
Or rotate, or sift-down, describes the operations we have to do to ensure that our Min or Max heap satisifies its properties. We will explain what a Minheap does, the Maxheap being the symmetric opposite.

Let's take a look at inserting 2 into this heap:
    4
   / \
  6   5
 /
2 <-- Insert it sequentially

We want to have it be a min-heap, so that we have the smallest element at the top. So we would swap 2 <> 6
    4
   / \
  2   5
 /
6 <-- Swapped to maintain min-heap structure 
Then again, 2 <> 4
    2 <-- Rose to top
   / \
  4   5
 /
6
Sift-down and Sift-up always work with the smaller of its two children. So for an instance in a min-heap of
  40
 /  \
20  30
The 40 will always interchange with the 20 over the 30.

>>> DELETE
Deleting for heaps is a bit more complicated, but in a way also easier. We remove the bottommost, rightmost node. We put that value in the node we deleted, and then we HEAPIFY again. This is because we need our Heap to be a complete binary tree.

For example, let's have the Heap:
     15
    /  \
  20    38
 /  \  /  \
30 29 40  50

DELETE(15):
     --
    /  \
  20    38
 /  \  /  \
30 29 40  50
We replace the value of the deleted node with the value in the bottommost, rightmost node
     50
    /  \
  20    38
 /  \  /  \
30 29 40  --
We heapify the entire thing again to get our final result of:
     20
    /  \
  29    38
 /  \  /  \
30 50 40  --

DELETE(38):
     15
    /  \
  20    --
 /  \  /  \
30 29 40  50
     15
    /  \
  20    50
 /  \  /  \
30 29 40  --
     15
    /  \
  20    40
 /  \  /  \
30 29 50  --
EOF