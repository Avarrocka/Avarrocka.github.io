++++++++++++ CSCA08 Tutorial 04 ++++++++++++

QUIZ! Basic memory model and tracing


- Worked together through design recipe
  Header
  Type Contract
  Requirements
  Examples
  Description
  Internal Comments
  Code
  Testing
  
- Remember that the Design Recipe is for Humans. That means it doesnt matter if you write REQ: x>0 or Req -> x > 0, as long as its readable
	EXAMPLE:
	def student_data(name, age, student_num, in_a08):  
		'''
		(str, int, str, bool) -> str                   
		Given a student's name, age, student number, and enrolment status,
		function will return a string representation of their data, in the order
		of student number, name, age and enrolment status.    
		
		REQ: age >= 0.
		>>> student_data("Jana", 18, "1234567", True)
		'<1234567,Jana,18,True>'
		>>> student_data("Jana", 18, "1234567", False)
		'<1234567,Jana,18,False>'                           
		'''
		# internal comments and code 
		# remember: comment first, code after
		# create a string to return
		data = "<"

		# add the compenents of the data in the order of number, name , age, status
		# add the first component to the data, student number
		data = data + student_num + ","

		# add the name to the data
		data = data + name + ","

		# tpyecast the age and add it to the data
		age = str(age)
		data = data + age + ","

		# notice how the two lines above are "covered" by the comment above
		# typecast the enrolment status and add it to the data
		# notice below, we did the same thing in one line (it's all the same)
		data = data + str(in_a08) + ">" 

		# return the data
		return data

- We worked through several other examples too

- Doctest -- automatically tests all the examples you have in your function examples (i.e. tests the above function for student_data("Jana", 18, "1234567", True) to match with '<1234567,Jana,18,True>' and the other case too)
	HOW TO USE:

	def exampleFunc():	# No design recipe -- this is just an example
		'''
		>>> exampleFunc()
		'Hello'			# Remember to have a String surrounded with Quotes - otherwise doctest will error!
		'''
		return 'Hello'

	import doctest
	doctest.testmod()

- Pep8 compliancy -- a Python-specific style guideline for people to use. You'll be penalized in the future if your code is not pep-8 compliant
	Check your code by copy/pasting at pep8online.com, running it, and fixing all mistakes


EOF