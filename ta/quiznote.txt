class BSTNode(object):
    def __init__(self, d, left=None, right=None):
        self.data = d
        self.left = left
        self.right = right

    def contains(self, search_obj):
        result = False
        # if our data is equal to what we're searching for, we're done
        if(self.data == search_obj):
            result = True
        # otherwise we have to look in our subtrees
        else:
            # search our left subtree
            if(self.data > search_obj and self.left):
                result = self.left.contains(search_obj)
            # search our right subtree
            elif(self.data < search_obj and self.right):
                result = self.right.contains(search_obj)
            else:
                result = False
        return result
    
    def BTcontains(self, search_obj):
        result = False
        # if our data is equal to what we're searching for, we're done
        if(self.data == search_obj):
            result = True
        # otherwise we have to look in our subtrees
        else:
            left = False
            right = False
            # search our left subtree
            if(self.left):
                left = self.left.BTcontains(search_obj)
            # search our right subtree
            if(self.right):
                right = self.right.BTcontains(search_obj)
            # if it exists in either right or left subtree, it exists
            if(left or right):
                result = True
        return result
    
    def bad_contains(self, search_obj):
        if self is None:
            result = False
        elif self.data == search_obj:
            result = True
        else:
            if self.data < search_obj:
                result = self.right.bad_contains(search_obj)
            else:
                result = self.left.bad_contains(search_obj)
        return result